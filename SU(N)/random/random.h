/******************************************************************************
 * @file     random.h
 * @author   Vadim Demchik <vadimdi@yahoo.com>,
 * @author   Natalia Kolomoyets <rknv7@mail.ru>
 * @version  1.5
 *
 * @brief    [QCDGPU]
 *           Pseudo-random numbers generators library (header)
 *
 * @section  LICENSE
 *
 * Copyright (c) 2013, 2014 Vadim Demchik, Natalia Kolomoyets
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 *    Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 *
 *    Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 *****************************************************************************/

#ifndef prngs_h
#define prngs_h

#include "../clinterface/clinterface.h"

namespace PRNG_CL{
class PRNG {
        public:
            typedef enum enum_PRNG_generators{
				PRNG_generator_none,                    // none
				PRNG_generator_any,                     // any generator
				PRNG_generator_XOR128,                  // XOR128 generator
				PRNG_generator_RANLUX0,                 // RANLUX (level 0) generator
				PRNG_generator_RANLUX1,                 // RANLUX (level 1) generator
				PRNG_generator_RANLUX2,                 // RANLUX (level 2) generator
				PRNG_generator_RANLUX3,                 // RANLUX (level 3) generator
				PRNG_generator_RANLUX4,                 // RANLUX (level 4) generator
                PRNG_generator_RANLUX,                  // RANLUX (arbitrary level) generator
                PRNG_generator_RANMAR,                  // RANMAR generator
                PRNG_generator_PM,                      // Park-Miller generator
				PRNG_generator_XOR7,                    // XORSeven generator
                PRNG_generator_RANECU                   // RANECU generator
			} PRNG_generators;

       PRNG_generators PRNG_generator;      // working PRNG

                   int PRNG_instances;      // number if generators
                   int PRNG_samples;        // number of PRNs, generated by each PRNG instance for one pass
                   int PRNG_randseries;     // Type of random series (0: time-dependent series, #_any_#: constant series for #_any_#) 
          unsigned int PRNG_srandtime;

          unsigned int PRNG_counter;        // counter runs of subroutine PRNG_produce

            cl_uint*   PRNG_seeds;                      // input seed table (uint)
           cl_uint4*   PRNG_seeds4;                     // input seed table (uint4)
           cl_uint4*   PRNG_seed_table_uint4;           // seed table
          cl_float4*   PRNG_seed_table_float4;          // seed table
          cl_float4*   PRNG_randoms;                    // output buffer for randoms

         unsigned int  PRNG_seed_id;                    // input seeds ID
         unsigned int  PRNG_seed_table_id;              // seed table ID
         unsigned int  PRNG_randoms_id;                 // output buffer for randoms ID
         unsigned int  PRNG_randoms_seed_id;            // kernel for seed ID
         unsigned int  PRNG_randoms_kernel_id;          // kernel ID

          GPU_CL::GPU* GPU0;                            // pointer to GPU instance

          PRNG(void);
         ~PRNG(void);

          double  trunc(double x);
            void  initialize(void);                                              // PRNG initialization
            void  produce(void);                                                 // PRNG produce on GPU
            void  produce_CPU(float* randoms_cpu);                               // PRNG produce on CPU (float)
            void  produce_CPU(float* randoms_cpu,int number_of_prns_CPU);        // PRNG produce on CPU (float)
    unsigned int  check(void);                                                   // PRNG compare GPU results with CPU
    unsigned int  check_seeds(void);                                             // PRNG check GPU seeds table with CPU
    unsigned int  check_range(void);                                             // PRNG check GPU produced PRNs range (0;1)
            void  parameters_setup(char* parameter,int ivalue,char* text_value);
             int  print_generator(char* header,int header_size);

        // common public parameters
             int  RL_nskip;

    unsigned int      convert_generator_to_uint(PRNG::PRNG_generators generator);
PRNG::PRNG_generators convert_uint_to_generator(unsigned int generator);

        private:

        // ___ Common section___________________________________________________________
     static char  prngs_source[FILENAME_MAX]; // path to OpenCL-kernels
            char* random;                     // source of kernels
    unsigned int  seeds_size;                 // input seed table size
    unsigned int  seed_table_size;            // seed table size
    unsigned int  randoms_size;               // size of output buffer
    unsigned int* pointer_to_randoms;         // pointer to output randoms
    unsigned int  randoms_produced;           // whole number of produced numbers (from first produced number)

        // ___ RANLUX___________________________________________________________________
         #define  RL_icons  2147483563
         #define  RL_itwo24	16777216	// 1<<24
         #define  RL_twom24  0.000000059604644775390625f
         #define  RL_twom12  0.000244140625f
           float  RL_seeds[24];
             int  RL_seed; // MAX = 2147483647
             int  RL_i24;
             int  RL_j24;
             int  RL_in24;
           float  RL_carry;
             int  RL_jseed;

            void  RL_initialize(void);                                           // RANLUX generator initialization on GPU
            void  RL_initialize_CPU(void);                                       // RANLUX generator initialization on CPU
           float  RL_produce_one_CPU(void);                                      // RANLUX produce one prn on CPU (float)
            void  RL_produce_CPU(float* randoms_cpu);                            // RANLUX produce on CPU (float)
            void  RL_produce_CPU(float* randoms_cpu,int number_of_prns_CPU);     // RANLUX produce on CPU (float)
            void  RL_print_seeds(void);                                          // RANLUX print CPU seed table
    unsigned int  RL_check_seeds(void);                                          // RANLUX check GPU seeds table with CPU
             int  RL_get_seed_table_index(int skip,int produced);                // RANLUX get seed table index

        // ___ XOR128___________________________________________________________________
        cl_uint4  XOR128_state;

            void  XOR128_initialize(void);                                       // XOR128 generator initialization on GPU
            void  XOR128_initialize_CPU(void);                                   // XOR128 generator initialization on CPU
    unsigned int  XOR128_produce_one_uint_CPU(void);                             // XOR128 produce one prn on CPU (unsigned integer)
           float  XOR128_produce_one_CPU(void);                                  // XOR128 produce one prn on CPU (float)
            void  XOR128_produce_CPU(float* randoms_cpu);                        // XOR128 produce on CPU (float)
            void  XOR128_produce_CPU(float* randoms_cpu,int number_of_prns_CPU); // XOR128 produce on CPU (float)

        // ___ RANMAR___________________________________________________________________
         #define  RM_CD (7654321.0 / 16777216.0)
         #define  RM_CM (16777213.0 /16777216.0)
           float  RM_seeds[97];
             int  RM_I97;
             int  RM_J97;
             int  RM_seed1;
             int  RM_seed2;
           float  RM_C;

            void  RANMAR_initialize(void);                                       // RANMAR generator initialization on GPU
            void  RANMAR_initialize_CPU(void);                                   // RANMAR generator initialization on CPU
           float  RANMAR_produce_one_CPU(void);                                  // RANMAR produce one prn on CPU (float)
            void  RANMAR_print_seeds(void);                                      // RANMAR print CPU seed table
    unsigned int  RANMAR_check_seeds(void);                                      // RANMAR check GPU seeds table with CPU
            void  RANMAR_produce_CPU(float* randoms_cpu);                        // RANMAR produce on CPU (float)
            void  RANMAR_produce_CPU(float* randoms_cpu,int number_of_prns_CPU); // RANMAR produce on CPU (float)

        // ___ Park-Miller (GGL)________________________________________________________
         #define  PM_seed    2147483644
         #define  PM_m_FP    (2147483647.0)
         #define  PM_a       16807
         #define  PM_m       2147483647
         #define  PM_q       127773         // (PM_m div PM_a)
         #define  PM_r       2836           // (PM_m mod PM_a)

           float  PMseedFP;
             int  PMseed;

            void  PM_initialize(void);                                           // PM generator initialization on GPU
            void  PM_initialize_CPU(void);                                       // PM generator initialization on CPU
    unsigned int  PM_produce_one_uint_CPU(void);                                 // PM produce one prn on CPU (unsigned integer)
           float  PM_produce_one_CPU(void);                                      // PM produce one prn on CPU (float)
            void  PM_produce_CPU(float* randoms_cpu);                            // PM produce on CPU (float)
            void  PM_produce_CPU(float* randoms_cpu,int number_of_prns_CPU);     // PM produce on CPU (float)

        // ___ XORSeven (XOR7)__________________________________________________________
         #define  XOR7_m_FP   (4294967296.0)

    unsigned int  XOR7_state[8];
    unsigned int  XOR7_index;
 
            void  XOR7_initialize(void);                                         // XOR7 generator initialization on GPU
            void  XOR7_initialize_CPU(void);                                     // XOR7 generator initialization on CPU
           float  XOR7_produce_one_CPU(void);                                    // XOR7 produce one prn on CPU (float)
            void  XOR7_produce_CPU(float* randoms_cpu);                          // XOR7 produce on CPU (float)
            void  XOR7_produce_CPU(float* randoms_cpu,int number_of_prns_CPU);   // XOR7 produce on CPU (float)

        // ___ RANECU___________________________________________________________________
         #define  RANECU_twom31	(2147483648.0)

         #define  RANECU_icons1  2147483563
         #define  RANECU_icons2  2147483399
         #define  RANECU_icons3  2147483562

         #define  RANECU_seedP11 53668
         #define  RANECU_seedP12 12211
         #define  RANECU_seedP13 40014

         #define  RANECU_seedP21 52774
         #define  RANECU_seedP22 3791
         #define  RANECU_seedP23 40692

         #define  RANECU_seed1  314159265
         #define  RANECU_seed2	123456789

             int  RANECU_jseed1;
             int  RANECU_jseed2;

            void  RANECU_initialize(void);                                       // RANECU generator initialization on GPU
            void  RANECU_initialize_CPU(void);                                   // RANECU generator initialization on CPU
           float  RANECU_produce_one_CPU(void);                                  // RANECU produce one prn on CPU (float)
            void  RANECU_produce_CPU(float* randoms_cpu);                        // RANECU produce on CPU (float)
            void  RANECU_produce_CPU(float* randoms_cpu,int number_of_prns_CPU); // RANECU produce on CPU (float)

};
};

#endif
